import string
import argparse
import configparser
import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import os
import string
import time
import re
from collections import Counter
from time import sleep
from uuid import uuid4
import matplotlib
import matplotlib.image as mpimg
import matplotlib.pyplot as plot
import pyrogram
import sys
import asyncio
from pyrogram import Client
from pyrogram import Client as Client2
from pyrogram import (Filters, InlineKeyboardButton, InlineKeyboardMarkup,
                      InlineQueryResultArticle, InlineQueryResultPhoto,
                      InputMediaPhoto, InputTextMessageContent, ReplyKeyboardMarkup)
from pyrogram.api import functions as tg_api
from pyrogram.errors import FloodWait, BadRequest, RPCError
from covid19plot import COVID19Plot
from getdata import pull_datasets, pull_global
here = os.path.realpath('.')
argp = argparse.ArgumentParser()
argp.add_argument ("-c", "--config", dest='config_file', default='conf.ini', type=str)
args = argp.parse_args()
here = os.path.realpath('.')
config_file = "conf.ini"
config = configparser.ConfigParser(defaults = {'here': here})
config.read(config_file, encoding="utf-8")
me = int(config["USER"]["admin"])
app = Client(
    "covid19bot",
    bot_token=config["API"]["api_token"],
    api_id=config["API"]["API_ID"],
    api_hash=config["API"]["API_HASH"]
)
cplt = COVID19Plot()
tot = cplt.get_global_regions()
world = cplt.get_global_regions()
comunitat= cplt.get_regions()
comunitat.sort()
tot.extend(comunitat)
tot.sort()
label='\n__Generated by [COVID19gram](t.me/COVID19gram_bot)__\n__Data source from [Datadista](https://github.com/datadista/datasets/)__'
label_global='\n__Generated by [COVID19gram](t.me/COVID19gram_bot)__\n__Data source from [covid19.health](https://github.com/stevenliuyi/covid19/)__'
cpltuci = COVID19Plot()

def normal(s):
    replacements = (
        ("á", "a"),
        ("é", "e"),
        ("í", "i"),
        ("ó", "o"),
        ("ú", "u"),
        ("à", "a"),
        ("è", "e"),
        ("ï", "i"),
        ("ò", "o"),
        ("ü", "u"),
    )
    for a, b in replacements:
        s = s.replace(a, b).replace(a.upper(), b.upper())
    return s

def cerca(paraula):
    global tot
    cerca = normal(paraula).lower()
    resultats=[]
    for r in tot:
        if normal(r).lower().find(cerca)>-1:
            resultats.append(r)
    return resultats

def get_img(region,dades="casos"):
    filename = ""
    outfn = ""
    if dades == "casos":
        # filename = cplt.generate_daily_cases_img(region)
        filename = cplt.generate_plot(plot_type="daily_cases", region = region)
    elif dades == "tot":
    #     filename = cplt.generate_all_img(c_id)
        filename = cplt.generate_plot(plot_type="active_recovered_deceased", region = region)
    elif dades == "actius":
        # filename = cplt.generate_active_cases_img(c_id)
        filename = cplt.generate_plot(plot_type="active", region = region)
    elif dades == "altes":
        # filename = cplt.generate_altes_img(c_id)
        filename = cplt.generate_plot(plot_type="recovered", region = region)
    elif dades == "def":
        # filename = cplt.generate_defuncions_img(c_id)
        filename = cplt.generate_plot(plot_type="daily_deceased", region = region)
    return filename

def get_caption(c_id,dades="casos"):
    filename = ""
    outfn = ""
    region = c_id
    if dades == "casos":
        return f'Increment de contagis a {region}'
    elif dades == "tot":
        return f'Casos actius a {region}'
    elif dades == "actius":
        return f'Casos actius a {region}'
    elif dades == "altes":
        return f'Evolució de les altes a {region}'
    elif dades == "def":
        return f'Evolució de les defuncions a {region}'

def botons_old(taula,dades="casos",regio="Total"):
    ibt=[]
    l_botns =[]
    botonets = []
    for i in range((len(taula)//21) + 1):
        for item in taula[i*21 : (i+1)*21]:
            ibt.append(InlineKeyboardButton(item,callback_data=item+"_"+dades))
        botonets = [ibt[i*3 : (i+1)*3] for i in range((len(ibt)//4)+2)]
        botonets.extend([[InlineKeyboardButton("⬅️Back",callback_data="back")]])
        btns = InlineKeyboardMarkup(botonets)
        l_botns.append(btns)
        ibt=[]
        botonets = []
    return l_botns

def botons(taula,dades="casos",regio="Total",font="spain"):
    ibt=[]
    l_botns =[]
    botonets = []
    result_all = []
    len_all = 0
    for chart in list(string.ascii_lowercase):
        result = [i for i in taula if i[0].lower()==(chart)]
        result_all.extend(result)
        if len(result_all)>7 or chart == "z":
            len_all = 0
            for item in result_all:
                ibt.append(InlineKeyboardButton(item,callback_data=item+"_"+dades))
            botonets = [ibt[i*3 : (i+1)*3] for i in range((len(ibt)//4)+2)]
            botonets.extend([[InlineKeyboardButton("⬅️Back",callback_data="back_"+font)]])
            btns = InlineKeyboardMarkup(botonets)
            l_botns.append(btns)
            ibt=[]
            botonets = []
            result_all = []
    return l_botns

def b_alphabet(taula,dades="casos",regio="Total", font="spain"):
    ibt=[]
    botonets = []
    ordre = 0
    text = ""
    len_all = 0
    s_char = ""
    for chart in list(string.ascii_lowercase):
        result = [i for i in taula if i[0].lower()==(chart)]
        len_all += len(result)
        if len_all>7 or chart == "z":
            if s_char =="":
                text = chart.upper()
            else:
                text = s_char +"-"+chart.upper()
            s_char = ""
            len_all = 0
            ibt.append(InlineKeyboardButton(text,callback_data="alph_"+str(ordre)+"_"+font))
            ordre +=1
        elif len(result)>0:
            if s_char =="":
                s_char = chart.upper()
    botonets = [ibt[i*3 : (i+1)*3] for i in range((len(ibt)//4)+2)]
    btns = InlineKeyboardMarkup(botonets)
    return btns

def b_single(dades="casos",regio="Total"):
    ibt=[]
    botonets = [[InlineKeyboardButton("🦠",callback_data="s_"+regio+"_casos"),InlineKeyboardButton("📊",callback_data="s_"+regio+"_tot"),InlineKeyboardButton("📈",callback_data="s_"+regio+"_actius"),InlineKeyboardButton("✅",callback_data="s_"+regio+"_altes"),InlineKeyboardButton("❌",callback_data="s_"+regio+"_def")]]
    btns = InlineKeyboardMarkup(botonets)
    return btns

def b_find(search,dades="casos"):
    taula = cerca(search)
    ibt = []
    l_botns =[]
    botonets = []
    pageSize = 18
    max = len(taula)//pageSize
    if len(taula)%pageSize != 0:
        max = len(taula)//pageSize + 1

    for pag in range(max):
        for item in taula[pag*pageSize : (pag+1)*pageSize]:
            ibt.append(InlineKeyboardButton(item,callback_data=item+"_"+dades))
        botonets = [ibt[i*3 : (i+1)*3] for i in range((len(ibt)//4)+2)]
        if pag == 0 and pag != max-1:
            botonets.extend([[InlineKeyboardButton(">>",callback_data="f_"+str(pag+1)+"_"+search)]])
        elif pag == max-1 and pag != 0:
            botonets.extend([[InlineKeyboardButton("<<",callback_data="f_"+str(pag-1)+"_"+search)]])
        elif pag >0 and pag < max-1:
            botonets.extend([[InlineKeyboardButton("<<",callback_data="f_"+str(pag-1)+"_"+search),InlineKeyboardButton(">>",callback_data="f_"+str(pag+1)+"_"+search)]])
        btns = InlineKeyboardMarkup(botonets)
        l_botns.append(btns)
        ibt=[]
        botonets = []

    return l_botns

def b_spain(taula,dades="casos"):
    ibt = []
    l_botns =[]
    botonets = []
    for item in taula:
        ibt.append(InlineKeyboardButton(item,callback_data=item+"_"+dades))
    botonets = [ibt[i*3 : (i+1)*3] for i in range((len(ibt)//4)+2)]
    btns = InlineKeyboardMarkup(botonets)
    l_botns.append(btns)
    return l_botns[0]


async def show_region(client, user, dataSource = "casos",region = "Total"):
    btns = b_single(dades=dataSource,regio=region)
    flname = get_img(region,dataSource)
    if region in world:
        caption = get_caption(region,dataSource)+label_global
    else:
        caption = get_caption(region,dataSource)+label
    try:
        await client.send_photo(user, photo=flname, caption = caption, reply_markup=btns)
    except BadRequest as e:
        if str(e).find("IMAGE_PROCESS_FAILED")>-1:
            os.remove(flname)
            flname = get_img(region,dataSource)
            await client.send_photo(user, photo=flname, caption = caption, reply_markup=btns)
        elif str(e).find("MESSAGE_NOT_MODIFIED")>-1:
            print("Error: "+str(e))
    except:
        print("Unexpected error:")
        raise

async def edit_region(client, user, mid, dataSource = "casos",region = "Total"):
    btns = b_single(dades=dataSource,regio=region)
    flname = get_img(region,dataSource)
    if region in world:
        caption = get_caption(region,dataSource)+label_global
    else:
        caption = get_caption(region,dataSource)+label
    try:
        await client.edit_message_media(user,mid,InputMediaPhoto(media=flname,caption = caption),reply_markup=btns)
    except BadRequest as e:
        if str(e).find("IMAGE_PROCESS_FAILED")>-1:
            os.remove(flname)
            flname = get_img(region,dataSource)
            await client.edit_message_media(user,mid,InputMediaPhoto(media=flname,caption = caption),reply_markup=btns)
        elif str(e).find("MESSAGE_NOT_MODIFIED")>-1:
            print("Error: "+str(e))
    except:
        print("Unexpected error:")
        raise

async def DoBot(comm, param, client, message,**kwargs):
    global config_file
    global config
    global me
    global comunitat
    user = message.from_user.id
    user = message.chat.id
    if comm == "start":
        btns = b_alphabet(comunitat)
        caption = "Choose a Region"
        await client.send_message(user, "Choose a Region",   reply_markup=btns)
    if comm == "spain":
        btns = b_spain(comunitat)
        caption = "Choose a Region"
        await client.send_message(user, "Choose a Region",   reply_markup=btns)
    if comm == "world":
        btns = b_alphabet(world,font="world")
        caption = "Choose a Region"
        await client.send_message(user, "Choose a Region",   reply_markup=btns)
    elif comm == "clean" and user == me:
        filelist = [ f for f in os.listdir("images") if f.endswith(".png") ]
        for f in filelist:
            os.remove(os.path.join("images", f))
        filelist = [ f for f in os.listdir("mimages") if f.endswith(".png") ]
        for f in filelist:
            os.remove(os.path.join("mimages", f))
    elif comm == "find":
        if len(param)>0:
            resultats = cerca(param)
            if len(resultats) == 0:
                await client.send_message(user, f'No results for `{param}`')
            elif len(resultats) == 1:
                await show_region(client, user, region =
                                  resultats[0])
            else:
                btns = b_find(param)[0]
                caption = f'Search Results for `{param}`'
                await client.send_message(user, caption,   reply_markup=btns)




@app.on_message(Filters.text)
async def g_request(client, message):
    global config_file
    global config
    global me
    global comunitat
    user = message.from_user.id
    if message.text.startswith('/'):
        comm = message.text.split()[0].strip('/')
        param = ""
        if re.match ('^/' + comm + ' .+$', message.text):
            param = re.search('^/' + comm + ' (.+)$', message.text).group(1)
        await DoBot(comm, param, client, message)
    else:
        param = message.text
        resultats = cerca(param)
        if len(resultats) == 0:
            await client.send_message(user, f'No results for `{param}`')
        elif len(resultats) == 1:
            await show_region(client, user, region =
                                resultats[0])
        else:
            btns = b_find(param)[0]
            caption = f'Search Results for `{param}`'
            await client.send_message(user, caption,   reply_markup=btns)


@app.on_callback_query()
async def answer(client, callback_query):
    global comunitat
    cbdata = callback_query.data
    user = callback_query.message.chat.id
    mid = callback_query.message.message_id
    params = callback_query.data.split("_")
    comm = params[0]
    if comm == "pag":
        pag = int(params[1])
        btns = botons(comunitat)[pag]
        caption = "Choose a Region"
        await client.edit_message_text(user,mid,caption,reply_markup=btns)

    elif comm == "back":
        font = params[1]
        if font == "world":
            btns = b_alphabet(world,font="world")
        else:
            btns = b_alphabet(comunitat)
        text = "Choose a Region"
        await client.edit_message_text(user,mid, text, reply_markup=btns)

    elif comm == "s":
        region = params[1]
        dataSource = params[2]
        flname =""
        if region in tot:
            await edit_region(client, user, mid, dataSource,region)

    elif comm == "alph":
        pag = int(params[1])
        font = params[2]
        btns = []
        if font == "world":
            btns = botons(world,font="world")[pag]
        else:
            btns = botons(comunitat)[pag]
        caption = "Choose a Region"
        await client.edit_message_text(user,mid,caption,reply_markup=btns)

    elif comm == "f":
        pag = int(params[1])
        search = params[2]
        btns = b_find(search)[pag]
        caption = f'Search Results for `{search}`'
        await client.edit_message_text(user, mid, caption, reply_markup=btns)

    elif comm in tot:
        region = comm
        dataSource = params[1]
        await show_region(client, user, dataSource,region)


async def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(pull_datasets, "interval", hours=1)
    scheduler.add_job(pull_global, "interval", hours=1)
    scheduler.start()
    await app.start()
    await app.idle()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())


