#!/bin/env python
# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np
from datetime import date
import os

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.font_manager import FontProperties
import seaborn as sns
sns.set_context("paper")
sns.set_style("whitegrid")


class COVID19Plot(object):

    _images_dir = None
    _source_path = None
    _source_ts = None
    _footer_font = None
    _df = None

    def __init__(self, data_directory='datasets/COVID 19', images_dir='images/'):
        if not os.path.exists(images_dir):
            os.makedirs(images_dir)
        self._source_path = data_directory
        self._reload_data()
        self._images_dir = images_dir
        self._footer_font = FontProperties()
        self._footer_font.set_family('serif')
        self._footer_font.set_style('italic')

    def _reload_data(self):
        csv_path = self._source_path + '/ccaa_covid19_casos_long.csv'
        if not os.path.isfile(csv_path):
            raise RuntimeError('Datasource not found')
  
        self._df = pd.read_csv(csv_path)
        # convert date to datetime and set index
        self._df['fecha']= pd.to_datetime(self._df['fecha']) 
        self._df.set_index(['fecha', 'cod_ine'], inplace=True)
        self._df.rename(columns={'total': 'casos'}, inplace=True)

        altas_df = pd.read_csv(self._source_path + '/ccaa_covid19_altas_long.csv')
        altas_df['fecha']= pd.to_datetime(altas_df['fecha']) 
        altas_df.set_index(['fecha', 'cod_ine'], inplace=True)
        altas_df.columns = ['CCAA_altas', 'altas']
        self._df = self._df.merge(altas_df, left_index=True, right_index=True, how='left')
        self._df.drop(columns=['CCAA_altas'], inplace=True)

        fac_df = pd.read_csv(self._source_path + '/ccaa_covid19_fallecidos_long.csv')
        fac_df['fecha']= pd.to_datetime(fac_df['fecha']) 
        fac_df.set_index(['fecha', 'cod_ine'], inplace=True)
        fac_df.columns = ['CCAA_fac', 'fallecidos']
        self._df = self._df.merge(fac_df, left_index=True, right_index=True, how='left')
        self._df.drop(columns=['CCAA_fac'], inplace=True)
        self._df.fillna(0, inplace=True)
        self._df.sort_index()
        self._df['activos'] = self._df['casos'] - self._df['altas'] - self._df['fallecidos']
        self._source_ts = int(os.path.getmtime(csv_path))

    def _check_new_data(self):
        csv_path = self._source_path + '/ccaa_covid19_casos_long.csv'
        if not os.path.isfile(csv_path):
            raise RuntimeError('Datasource not found')
        if int(os.path.getmtime(csv_path)) != self._source_ts:
            self._reload_data()

    def get_regions(self):
        return list(self._df.CCAA.unique())

    def _add_footer(self, ax):
        ax.set_xlabel('Generated by COVID19gram (telegram bot)\n Data source from Datadista (see https://github.com/datadista/datasets/)',
              position=(1., 0.),
              fontproperties=self._footer_font,
              horizontalalignment='right')

    def _generate_cases_image(self, df_reduced, region, image_path):
        fig, ax = plt.subplots(figsize=(12, 6))
        
        x = df_reduced.index.get_level_values('fecha')
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%d %b'))
        plt.bar(x, df_reduced['increase'], alpha=0.3, label='Daily increment')
        plt.fill_between(x, 0, df_reduced['rolling'], color='red', alpha=0.5, label='Rolling avg increment (3 days)')
        plt.plot(x, df_reduced['rolling'], color='red')
        ax.set_xlim(np.datetime64('2020-03-01'))
        ax.set_ylabel('Cases')
        ax.figure.autofmt_xdate()
        ax.legend(loc='upper left')
        plt.title(f'Increment de contagis a {region}', fontsize=20)
        self._add_footer(ax)       
        plt.savefig(image_path)
        plt.close()

    def generate_daily_cases_img(self, region):
        # check if data source has been modified, and reload it if necessary
        self._check_new_data()
        # check if image has already been generated
        image_fpath = self._images_dir + '/' + region + '_cases_' + str(self._source_ts) + '.png'
        if os.path.isfile(image_fpath):
            return image_fpath

        # regenerate image
        # select region
        df_reduced = self._df[self._df.CCAA==region]
        # calculate daily increase and rolling avg
        df_reduced['increase'] = df_reduced['casos'] - df_reduced['casos'].shift(1)
        df_reduced['rolling'] = df_reduced.rolling(window=3).mean()['increase']

        self._generate_cases_image(df_reduced, region, image_fpath)
        return image_fpath

    def _generate_active_cases_image(self, df_reduced, region, image_path):
        fig, ax = plt.subplots(figsize=(12, 6))

        x = df_reduced.index.get_level_values('fecha')
        alpha, width = (0.5, 0.30)
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%d %b'))
        ax.bar(x, df_reduced['activos'], color='#4e4e4e', width=width, alpha=alpha, label='Casos actius')
        ax.bar(x + np.timedelta64(7,'h'), df_reduced['altas'], color='g', width=width, alpha=alpha, label='Altes')
        ax.bar(x + np.timedelta64(14,'h'), df_reduced['fallecidos'], color='r', width=width, alpha=alpha, label='Defuncions')
        ax.set_ylabel('Casos')
        ax.figure.autofmt_xdate()
        ax.legend(loc='upper left')
        plt.title(f'Casos actius a {region}', fontsize=20)
        self._add_footer(ax)
        plt.savefig(image_path)
        plt.close()

    def generate_active_cases_img(self, region):
        # check if data source has been modified, and reload it if necessary
        self._check_new_data()
        # check if image has already been generated
        image_fpath = self._images_dir + '/' + region + '_active_' + str(self._source_ts) + '.png'
        if os.path.isfile(image_fpath):
            return image_fpath

        # regenerate image
        # select region
        df_reduced = self._df[self._df.CCAA==region]
        self._generate_active_cases_image(df_reduced, region, image_fpath)
        return image_fpath
